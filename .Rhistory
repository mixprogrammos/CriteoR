}
query
# data <- httr::GET('https://api.criteo.com/marketing/v1/budgets', header, query = query)
# budget <- httr::content(data)
#
# null_list_to_na <- function(x) lapply(x, function(x) if(is.null(x)) x = NA else x)
# budget <- lapply(budget, null_list_to_na)
#
# #  Unlisting budgets list. Using sapply, because we want get a vertical matrix.
# #  Then we transpose matrix and convert it to tibble (data frame of dplyr).
# budget <- dplyr::as_tibble(t(sapply(budget, function(x) unlist(x))))
# budget <- dplyr::select(budget, columns)
#
# return(budget)
}
criteo_budget_info(columns = 'all')
criteo_budget_info <- function(tok = criteo_auth(),
columns = c('budgetName', 'type', 'totalAmount', 'remainingBudget'),
active_budgets_only = T){
header <- httr::add_headers(Authorization = tok)
if (any(columns == 'all')){
query <- NULL
} else {
query <- list(onlyActiveCampaigns = active_budgets_only)
}
query
# data <- httr::GET('https://api.criteo.com/marketing/v1/budgets', header, query = query)
# budget <- httr::content(data)
#
# null_list_to_na <- function(x) lapply(x, function(x) if(is.null(x)) x = NA else x)
# budget <- lapply(budget, null_list_to_na)
#
# #  Unlisting budgets list. Using sapply, because we want get a vertical matrix.
# #  Then we transpose matrix and convert it to tibble (data frame of dplyr).
# budget <- dplyr::as_tibble(t(sapply(budget, function(x) unlist(x))))
# budget <- dplyr::select(budget, columns)
#
# return(budget)
}
criteo_budget_info(columns = 'all')
criteo_budget_info <- function(tok = criteo_auth(),
columns = c('budgetName', 'type', 'totalAmount', 'remainingBudget'),
active_budgets_only = T){
header <- httr::add_headers(Authorization = tok)
if (any(columns == 'all')){
query <- NULL
} else {
query <- list(onlyActiveCampaigns = active_budgets_only)
}
query
data <- httr::GET('https://api.criteo.com/marketing/v1/budgets', header, query = query)
budget <- httr::content(data)
null_list_to_na <- function(x) lapply(x, function(x) if(is.null(x)) x = NA else x)
budget <- lapply(budget, null_list_to_na)
#  Unlisting budgets list. Using sapply, because we want get a vertical matrix.
#  Then we transpose matrix and convert it to tibble (data frame of dplyr).
budget <- dplyr::as_tibble(t(sapply(budget, function(x) unlist(x))))
budget <- dplyr::select(budget, columns)
return(budget)
}
criteo_budget_info(columns = 'all')
criteo_budget_info <- function(tok = criteo_auth(),
columns = c('budgetName', 'type', 'totalAmount', 'remainingBudget'),
active_budgets_only = T){
header <- httr::add_headers(Authorization = tok)
if (any(columns == 'all')){
query <- NULL
} else {
query <- list(onlyActiveCampaigns = active_budgets_only)
}
query
data <- httr::GET('https://api.criteo.com/marketing/v1/budgets', header, query = query)
data
#budget <- httr::content(data)
#
#null_list_to_na <- function(x) lapply(x, function(x) if(is.null(x)) x = NA else x)
#budget <- lapply(budget, null_list_to_na)
#
##  Unlisting budgets list. Using sapply, because we want get a vertical matrix.
##  Then we transpose matrix and convert it to tibble (data frame of dplyr).
#budget <- dplyr::as_tibble(t(sapply(budget, function(x) unlist(x))))
#budget <- dplyr::select(budget, columns)
#
#return(budget)
}
criteo_budget_info(columns = 'all')
criteo_budget_info <- function(tok = criteo_auth(),
columns = c('budgetName', 'type', 'totalAmount', 'remainingBudget'),
active_budgets_only = T){
header <- httr::add_headers(Authorization = tok)
if (any(columns == 'all')){
query <- NULL
} else {
query <- list(onlyActiveCampaigns = active_budgets_only)
}
query
data <- httr::GET('https://api.criteo.com/marketing/v1/budgets', header, query = query)
budget <- httr::content(data)
#
#null_list_to_na <- function(x) lapply(x, function(x) if(is.null(x)) x = NA else x)
#budget <- lapply(budget, null_list_to_na)
#
##  Unlisting budgets list. Using sapply, because we want get a vertical matrix.
##  Then we transpose matrix and convert it to tibble (data frame of dplyr).
#budget <- dplyr::as_tibble(t(sapply(budget, function(x) unlist(x))))
#budget <- dplyr::select(budget, columns)
#
return(budget)
}
criteo_budget_info(columns = 'all')
criteo_budget_info <- function(tok = criteo_auth(),
columns = c('budgetName', 'type', 'totalAmount', 'remainingBudget'),
active_budgets_only = T){
header <- httr::add_headers(Authorization = tok)
if (any(columns == 'all')){
query <- NULL
} else {
query <- list(onlyActiveCampaigns = active_budgets_only)
}
data <- httr::GET('https://api.criteo.com/marketing/v1/budgets', header, query = query)
budget <- httr::content(data)
null_list_to_na <- function(x) lapply(x, function(x) if(is.null(x)) x = NA else x)
budget <- lapply(budget, null_list_to_na)
#  Unlisting budgets list. Using sapply, because we want get a vertical matrix.
#  Then we transpose matrix and convert it to tibble (data frame of dplyr).
budget <- dplyr::as_tibble(t(sapply(budget, function(x) unlist(x))))
# budget <- dplyr::select(budget, columns)
return(budget)
}
criteo_budget_info(columns = 'all')
criteo_budget_info()
}
criteo_budget_info()
criteo_budget_info <- function(tok = criteo_auth(),
columns = c('budgetName', 'type', 'totalAmount', 'remainingBudget'),
active_budgets_only = T){
header <- httr::add_headers(Authorization = tok)
query <- list(onlyActiveCampaigns = active_budgets_only)
data <- httr::GET('https://api.criteo.com/marketing/v1/budgets', header, query = query)
budget <- httr::content(data)
null_list_to_na <- function(x) lapply(x, function(x) if(is.null(x)) x = NA else x)
budget <- lapply(budget, null_list_to_na)
#  Unlisting budgets list. Using sapply, because we want get a vertical matrix.
#  Then we transpose matrix and convert it to tibble (data frame of dplyr).
budget <- dplyr::as_tibble(t(sapply(budget, function(x) unlist(x))))
if (any(columns != 'all')){
budget <- dplyr::select(budget, columns)
}
return(budget)
}
criteo_budget_info()
criteo_budget_info(columns = 'all')
criteo_budget_info <- function(tok = criteo_auth(),
columns = c('budgetName', 'type', 'totalAmount', 'remainingBudget'),
active_budgets_only = T){
header <- httr::add_headers(Authorization = tok)
query <- list(onlyActiveCampaigns = active_budgets_only)
data <- httr::GET('https://api.criteo.com/marketing/v1/budgets', header, query = query)
budget <- httr::content(data)
null_list_to_na <- function(x) lapply(x, function(x) if(is.null(x)) x = NA else x)
budget <- lapply(budget, null_list_to_na)
#  Unlisting budgets list. Using sapply, because we want get a vertical matrix.
#  Then we transpose matrix and convert it to tibble (data frame of dplyr).
budget <- dplyr::as_tibble(t(sapply(budget, function(x) unlist(x))))
if (any(columns != 'all')){
budget <- dplyr::select(budget, columns)
}
return(budget)
}
criteo_budget_info(columns = 'all', active_budgets_only = F)
criteo_campaigns <- function(tok = criteo_auth(), as_data_frame = T, active_companies_only = T){
status <- ifelse(active_companies_only, 'Running', '')
query <- list(campaignStatus = status)
header <- httr::add_headers(Authorization = criteo_auth())
data <- httr::GET('https://api.criteo.com/marketing/v1/campaigns', header, query = query)
campaigns <- httr::content(data)
if (as_data_frame) {
budget <- lapply(campaigns, function(x) lapply(x, function(x) if(is.null(x)) x = NA else x))
campaigns <-  dplyr::as_tibble(t(sapply(campaigns, function(x) unlist(x))))
}
return(campaigns)
}
criteo_campaigns()
criteo_campaigns <- function(tok = criteo_auth(), active_companies_only = T){
status <- ifelse(active_companies_only, 'Running', '')
query <- list(campaignStatus = status)
header <- httr::add_headers(Authorization = criteo_auth())
data <- httr::GET('https://api.criteo.com/marketing/v1/campaigns', header, query = query)
campaigns <- httr::content(data)
budget <- lapply(campaigns, function(x) lapply(x, function(x) if(is.null(x)) x = NA else x))
campaigns <-  dplyr::as_tibble(t(sapply(campaigns, function(x) unlist(x))))
return(campaigns)
}
criteo_campaigns()
criteo_campaigns <- function(tok = criteo_auth(), active_companies_only = T){
status <- ifelse(active_companies_only, 'Running', '')
query <- list(campaignStatus = status)
header <- httr::add_headers(Authorization = criteo_auth())
data <- httr::GET('https://api.criteo.com/marketing/v1/campaigns', header, query = query)
campaigns <- httr::content(data)
null_list_to_na <- function(x) lapply(x, function(x) if(is.null(x)) x = NA else x)
campaigns <- lapply(campaigns, null_list_to_na)
campaigns <-  dplyr::as_tibble(t(sapply(campaigns, function(x) unlist(x))))
return(campaigns)
}
criteo_campaigns()
criteo_campaigns <- function(tok = criteo_auth(), active_companies_only = T){
status <- ifelse(active_companies_only, 'Running', '')
query <- list(campaignStatus = status)
header <- httr::add_headers(Authorization = criteo_auth())
data <- httr::GET('https://api.criteo.com/marketing/v1/campaigns', header, query = query)
campaigns <- httr::content(data)
null_list_to_na <- function(x) lapply(x, function(x) if(is.null(x)) x = NA else x)
campaigns <- lapply(campaigns, null_list_to_na)
#campaigns <-  dplyr::as_tibble(t(sapply(campaigns, function(x) unlist(x))))
return(campaigns)
}
criteo_campaigns()
criteo_campaigns(active_companies_only = F)
criteo_campaigns <- function(tok = criteo_auth(), active_companies_only = T){
status <- ifelse(active_companies_only, 'Running', '')
query <- list(campaignStatus = status)
header <- httr::add_headers(Authorization = criteo_auth())
data <- httr::GET('https://api.criteo.com/marketing/v1/campaigns', header, query = query)
campaigns <- httr::content(data)
null_list_to_na <- function(x) lapply(x, function(x) if(is.null(x)) x = NA else x)
campaigns <- lapply(campaigns, null_list_to_na)
campaigns <-  dplyr::as_tibble(t(sapply(campaigns, function(x) unlist(x))))
return(campaigns)
}
criteo_campaigns(active_companies_only = F)
criteo_campaigns()
criteo_stats_report()
criteo_stats_report(startDate = Sys.Date() - 5)
criteo_stats_report(startDate = Sys.Date() - 5, prettify = F)
criteo_stats_report <- function(startDate = Sys.Date() - 1,
endDate = Sys.Date() - 1,
dimensions = list("Day", "CampaignId"),
metrics = list("Audience", "Displays", "Clicks",
"ECpc", "ECpm", "AdvertiserCost"),
tok = criteo_auth(),
reportType = "CampaignPerformance",
ignoreXDevice = F,
advertiserIds = criteo_advertisers(),
currency = 'RUB',
prettify = T){
header <- httr::add_headers(Authorization = tok)
body <- list(reportType = reportType,
ignoreXDevice = ignoreXDevice,
advertiserIds = advertiserIds,
startDate = startDate,
endDate = endDate,
dimensions = dimensions,
metrics = metrics,
format = 'Csv',
currency = currency)
data <- httr::POST('https://api.criteo.com/marketing/v1/statistics', header, body = body, encode = 'json')
stats <- readr::read_delim(httr::content(data, as = "text", encoding = 'UTF-8'), delim = ';')
if (!prettify) return(stats) else {
stats <- stats %>%
transmute(advertiser = `Advertiser Name`,
date = lubridate::mdy(Day),
campaign_id = `Campaign ID`,
campaign = `Campaign Name`,
audience = round(Audience),
impressions = Impressions,
clicks = Clicks,
costs = round(Cost, 2),
cpc = round(CPC, 2),
cpm = round(ECPM, 2),
currency = Currency
)
return(stats)
}
}
criteo_stats_report()
header <- httr::add_headers(Authorization = tok)
#   tok: Criteo token. Default is call and refresh token automatically.body <- list(reportType = reportType,
ignoreXDevice = ignoreXDevice,
advertiserIds = advertiserIds,
startDate = startDate,
endDate = endDate,
dimensions = dimensions,
metrics = metrics,
format = 'Csv',
currency = currency)
criteo_stats_report()
criteo_stats_report <- function(startDate = Sys.Date() - 1,
endDate = Sys.Date() - 1,
dimensions = list("Day", "CampaignId"),
metrics = list("Audience", "Displays", "Clicks",
"ECpc", "ECpm", "AdvertiserCost"),
tok = criteo_auth(),
reportType = "CampaignPerformance",
ignoreXDevice = F,
advertiserIds = criteo_advertisers(),
currency = 'RUB',
prettify = T){
# Get statistics about your advertising in Criteo.
#
# Args:
#   startDate: Date, start your report starting. By default yesterday.
#   startDate: Date, end your report starting. By default yesterday.
#   dimensions: How slice your data? By default by Day and CampaignId. You can set number of dimensions between one and three.
#                         Possible values: CampaignId, AdvertiserId, Category, Hour, Day, Week, Month, Year.
#   metrics: Which columns will be displayed. By default Audience, Displays, Clicks, ECpc, ECpm, AdvertiserCost.
#                         Possible values: #TODO
#   tok: Criteo token. Default is call and refresh token automatically.
#   reportType: The type of report to generate. By default, CampaignPerformance
#                         Possible values: CampaignPerformance, FacebookDPA, TransactionID.
#   ignoreXDevice: Ignore cross-device data. By default, FALSE.
#   advertiserIds: Criteo advertiser. Default is call automatically all advertisers. You can set only need value.
#   currency: By default RUB.
#   prettify: By default TRUE. If TRUE returns object:
#     tibble (advertiser: <class: {Character}>,
#             date: <class: {Date}>,
#             campaign_id: <class: {Numeric}>,
#             campaign: <class: {Character}>,
#             audience: rounded until 0 values after comma <class: {Numeric}>,
#             impressions: <class: {Numeric}>,
#             clicks: <class: {Numeric}>,
#             costs: rounded until 2 values after comma <class: {Numeric}>,
#             cpc: rounded until 2 values after comma <class: {Numeric}>,
#             cpm: rounded until 2 values after comma <class: {Numeric}>,
#             currency: <class: {Character}>)
#
# Returns:
#   By default data frame with all needed columns (watch in 'prettify') with advertising stats.
header <- httr::add_headers(Authorization = tok)
body <- list(reportType = reportType,
ignoreXDevice = ignoreXDevice,
advertiserIds = advertiserIds,
startDate = startDate,
endDate = endDate,
dimensions = dimensions,
metrics = metrics,
format = 'Csv',
currency = currency)
data <- httr::POST('https://api.criteo.com/marketing/v1/statistics', header, body = body, encode = 'json')
stats <- readr::read_delim(httr::content(data, as = "text", encoding = 'UTF-8'), delim = ';')
if (prettify) {
stats <- stats %>%
transmute(advertiser = `Advertiser Name`,
date = lubridate::mdy(Day),
campaign_id = `Campaign ID`,
campaign = `Campaign Name`,
audience = round(Audience),
impressions = Impressions,
clicks = Clicks,
costs = round(Cost, 2),
cpc = round(CPC, 2),
cpm = round(ECPM, 2),
currency = Currency)
}
return(stats)
}
criteo_stats_report()
criteo_stats_report(prettify = F)
criteo_stats_report <- function(startDate = Sys.Date() - 1,
endDate = Sys.Date() - 1,
dimensions = list("Day", "CampaignId"),
metrics = list("Audience", "Displays", "Clicks",
"ECpc", "ECpm", "AdvertiserCost"),
tok = criteo_auth(),
reportType = "CampaignPerformance",
ignoreXDevice = F,
advertiserIds = criteo_advertisers(),
currency = 'RUB',
prettify = T){
# Get statistics about your advertising in Criteo.
#
# Args:
#   startDate: Date, start your report starting. By default yesterday.
#   startDate: Date, end your report starting. By default yesterday.
#   dimensions: How slice your data? By default by Day and CampaignId. You can set number of dimensions between one and three.
#                         Possible values: CampaignId, AdvertiserId, Category, Hour, Day, Week, Month, Year.
#   metrics: Which columns will be displayed. By default Audience, Displays, Clicks, ECpc, ECpm, AdvertiserCost.
#                         Possible values: #TODO
#   tok: Criteo token. Default is call and refresh token automatically.
#   reportType: The type of report to generate. By default, CampaignPerformance
#                         Possible values: CampaignPerformance, FacebookDPA, TransactionID.
#   ignoreXDevice: Ignore cross-device data. By default, FALSE.
#   advertiserIds: Criteo advertiser. Default is call automatically all advertisers. You can set only need value.
#   currency: By default RUB.
#   prettify: By default TRUE. If TRUE returns object:
#     tibble (advertiser: <class: {Character}>,
#             date: <class: {Date}>,
#             campaign_id: <class: {Numeric}>,
#             campaign: <class: {Character}>,
#             audience: rounded until 0 values after comma <class: {Numeric}>,
#             impressions: <class: {Numeric}>,
#             clicks: <class: {Numeric}>,
#             costs: rounded until 2 values after comma <class: {Numeric}>,
#             cpc: rounded until 2 values after comma <class: {Numeric}>,
#             cpm: rounded until 2 values after comma <class: {Numeric}>,
#             currency: <class: {Character}>). If FALSE return data frame with all data in raw order.
#
# Returns:
#   By default data frame with all needed columns (watch in 'prettify') with advertising stats.
header <- httr::add_headers(Authorization = tok)
body <- list(reportType = reportType,
ignoreXDevice = ignoreXDevice,
advertiserIds = advertiserIds,
startDate = startDate,
endDate = endDate,
dimensions = dimensions,
metrics = metrics,
format = 'Csv',
currency = currency)
data <- httr::POST('https://api.criteo.com/marketing/v1/statistics', header, body = body, encode = 'json')
stats <- readr::read_delim(httr::content(data, as = "text", encoding = 'UTF-8'), delim = ';')
if (prettify) {
stats <- stats %>%
transmute(advertiser = `Advertiser Name`,
date = lubridate::mdy(Day),
campaign_id = `Campaign ID`,
campaign = `Campaign Name`,
audience = round(Audience),
impressions = Impressions,
clicks = Clicks,
costs = round(Cost, 2),
cpc = round(CPC, 2),
cpm = round(ECPM, 2),
currency = Currency)
}
return(stats)
}
criteo_stats_report(prettify = F)
covr::package_coverage()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
library(CriteoR)
CriteoR::criteo_get_token(client_id = "mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
CriteoR::criteo_get_token(client_id = "mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
devtools::install_github("dokato/todor")
todor::todor()
to <- CriteoR::criteo_get_token(client_id = "mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
CriteoR::criteo_auth()
CriteoR::criteo_advertisers()
CriteoR::criteo_stats_report()
CriteoR::criteo_stats_report(startDate = "2019-05-01")
CriteoR::criteo_stats_report(startDate = "2019-05-01", prettify = F)
CriteoR::criteo_stats_report(startDate = "2019-05-01")
devtools::load_all()
devtools::load_all()
criteo_token <- readRDS("~/Downloads/Work/Personal/Programming/R/Projects/CriteoR/criteo_token.RDS")
readRDS('criteo_token.RDS')
readRDS('criteo_token')
readRDS()
load("criteo_token.RDS")
todor::todor()
todor::todor()
covr::package_coverage()
install.packages("covr")
covr::package_coverage()
usethis::use_test()
usethis::use_testthat()
covr::package_coverage()
lintr::lint_package()
test_check("CriteoR")
library(testthat)
library(CriteoR)
test_check("CriteoR")
devtools::test()
covr::package_coverage()
usethis::use_test()
usethis::use_test()
todor::todor()
devtools::load_all()
library(CriteoR)
dir.create()
dir.create(getwd()
dir.create(getwd())
dir.create(getwd())
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
CriteoR::criteo_auth()
library(CriteoR)
CriteoR::criteo_auth("mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
devtools::load_all()
CriteoR::criteo_auth("mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
devtools::load_all()
devtools::load_all()
CriteoR::criteo_auth("mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
exists("criteo_token.RDS")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
CriteoR::criteo_auth_token()
lintr::lint_package()
lintr::lint_package()
devtools::load_all()
