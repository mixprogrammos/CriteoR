advertiserIds = criteo_advertisers(),
currency = 'RUB',
prettify = T){
# Get statistics about your advertising in Criteo.
#
# Args:
#   startDate: Date, start your report starting. By default yesterday.
#   startDate: Date, end your report starting. By default yesterday.
#   dimensions: How slice your data? By default by Day and CampaignId. You can set number of dimensions between one and three.
#                         Possible values: CampaignId, AdvertiserId, Category, Hour, Day, Week, Month, Year.
#   metrics: Which columns will be displayed. By default Audience, Displays, Clicks, ECpc, ECpm, AdvertiserCost.
#                         Possible values: #TODO
#   tok: Criteo token. Default is call and refresh token automatically.
#   reportType: The type of report to generate. By default, CampaignPerformance
#                         Possible values: CampaignPerformance, FacebookDPA, TransactionID.
#   ignoreXDevice: Ignore cross-device data. By default, FALSE.
#   advertiserIds: Criteo advertiser. Default is call automatically all advertisers. You can set only need value.
#   currency: By default RUB.
#   prettify: By default TRUE. If TRUE returns object:
#     tibble (advertiser: <class: {Character}>,
#             date: <class: {Date}>,
#             campaign_id: <class: {Numeric}>,
#             campaign: <class: {Character}>,
#             audience: rounded until 0 values after comma <class: {Numeric}>,
#             impressions: <class: {Numeric}>,
#             clicks: <class: {Numeric}>,
#             costs: rounded until 2 values after comma <class: {Numeric}>,
#             cpc: rounded until 2 values after comma <class: {Numeric}>,
#             cpm: rounded until 2 values after comma <class: {Numeric}>,
#             currency: <class: {Character}>)
#
# Returns:
#   By default data frame with all needed columns (watch in 'prettify') with advertising stats.
header <- httr::add_headers(Authorization = tok)
body <- list(reportType = reportType,
ignoreXDevice = ignoreXDevice,
advertiserIds = advertiserIds,
startDate = startDate,
endDate = endDate,
dimensions = dimensions,
metrics = metrics,
format = 'Csv',
currency = currency)
data <- httr::POST('https://api.criteo.com/marketing/v1/statistics', header, body = body, encode = 'json')
stats <- readr::read_delim(httr::content(data, as = "text", encoding = 'UTF-8'), delim = ';')
if (prettify) {
stats <- stats %>%
transmute(advertiser = `Advertiser Name`,
date = lubridate::mdy(Day),
campaign_id = `Campaign ID`,
campaign = `Campaign Name`,
audience = round(Audience),
impressions = Impressions,
clicks = Clicks,
costs = round(Cost, 2),
cpc = round(CPC, 2),
cpm = round(ECPM, 2),
currency = Currency)
}
return(stats)
}
criteo_stats_report()
criteo_stats_report(prettify = F)
criteo_stats_report <- function(startDate = Sys.Date() - 1,
endDate = Sys.Date() - 1,
dimensions = list("Day", "CampaignId"),
metrics = list("Audience", "Displays", "Clicks",
"ECpc", "ECpm", "AdvertiserCost"),
tok = criteo_auth(),
reportType = "CampaignPerformance",
ignoreXDevice = F,
advertiserIds = criteo_advertisers(),
currency = 'RUB',
prettify = T){
# Get statistics about your advertising in Criteo.
#
# Args:
#   startDate: Date, start your report starting. By default yesterday.
#   startDate: Date, end your report starting. By default yesterday.
#   dimensions: How slice your data? By default by Day and CampaignId. You can set number of dimensions between one and three.
#                         Possible values: CampaignId, AdvertiserId, Category, Hour, Day, Week, Month, Year.
#   metrics: Which columns will be displayed. By default Audience, Displays, Clicks, ECpc, ECpm, AdvertiserCost.
#                         Possible values: #TODO
#   tok: Criteo token. Default is call and refresh token automatically.
#   reportType: The type of report to generate. By default, CampaignPerformance
#                         Possible values: CampaignPerformance, FacebookDPA, TransactionID.
#   ignoreXDevice: Ignore cross-device data. By default, FALSE.
#   advertiserIds: Criteo advertiser. Default is call automatically all advertisers. You can set only need value.
#   currency: By default RUB.
#   prettify: By default TRUE. If TRUE returns object:
#     tibble (advertiser: <class: {Character}>,
#             date: <class: {Date}>,
#             campaign_id: <class: {Numeric}>,
#             campaign: <class: {Character}>,
#             audience: rounded until 0 values after comma <class: {Numeric}>,
#             impressions: <class: {Numeric}>,
#             clicks: <class: {Numeric}>,
#             costs: rounded until 2 values after comma <class: {Numeric}>,
#             cpc: rounded until 2 values after comma <class: {Numeric}>,
#             cpm: rounded until 2 values after comma <class: {Numeric}>,
#             currency: <class: {Character}>). If FALSE return data frame with all data in raw order.
#
# Returns:
#   By default data frame with all needed columns (watch in 'prettify') with advertising stats.
header <- httr::add_headers(Authorization = tok)
body <- list(reportType = reportType,
ignoreXDevice = ignoreXDevice,
advertiserIds = advertiserIds,
startDate = startDate,
endDate = endDate,
dimensions = dimensions,
metrics = metrics,
format = 'Csv',
currency = currency)
data <- httr::POST('https://api.criteo.com/marketing/v1/statistics', header, body = body, encode = 'json')
stats <- readr::read_delim(httr::content(data, as = "text", encoding = 'UTF-8'), delim = ';')
if (prettify) {
stats <- stats %>%
transmute(advertiser = `Advertiser Name`,
date = lubridate::mdy(Day),
campaign_id = `Campaign ID`,
campaign = `Campaign Name`,
audience = round(Audience),
impressions = Impressions,
clicks = Clicks,
costs = round(Cost, 2),
cpc = round(CPC, 2),
cpm = round(ECPM, 2),
currency = Currency)
}
return(stats)
}
criteo_stats_report(prettify = F)
covr::package_coverage()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
library(CriteoR)
CriteoR::criteo_get_token(client_id = "mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
CriteoR::criteo_get_token(client_id = "mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
devtools::install_github("dokato/todor")
todor::todor()
to <- CriteoR::criteo_get_token(client_id = "mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
CriteoR::criteo_auth()
CriteoR::criteo_advertisers()
CriteoR::criteo_stats_report()
CriteoR::criteo_stats_report(startDate = "2019-05-01")
CriteoR::criteo_stats_report(startDate = "2019-05-01", prettify = F)
CriteoR::criteo_stats_report(startDate = "2019-05-01")
devtools::load_all()
devtools::load_all()
criteo_token <- readRDS("~/Downloads/Work/Personal/Programming/R/Projects/CriteoR/criteo_token.RDS")
readRDS('criteo_token.RDS')
readRDS('criteo_token')
readRDS()
load("criteo_token.RDS")
todor::todor()
todor::todor()
covr::package_coverage()
install.packages("covr")
covr::package_coverage()
usethis::use_test()
usethis::use_testthat()
covr::package_coverage()
lintr::lint_package()
test_check("CriteoR")
library(testthat)
library(CriteoR)
test_check("CriteoR")
devtools::test()
covr::package_coverage()
usethis::use_test()
usethis::use_test()
todor::todor()
devtools::load_all()
library(CriteoR)
dir.create()
dir.create(getwd()
dir.create(getwd())
dir.create(getwd())
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
CriteoR::criteo_auth()
library(CriteoR)
CriteoR::criteo_auth("mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
devtools::load_all()
CriteoR::criteo_auth("mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
devtools::load_all()
devtools::load_all()
CriteoR::criteo_auth("mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
exists("criteo_token.RDS")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
CriteoR::criteo_auth_token()
lintr::lint_package()
lintr::lint_package()
devtools::load_all()
devtools::check()
devtools::use_vignette("criteor_test")
library(dplyr)
devtools::load_all()
devtools::document()
devtools::use_vignette("criteor_test")
usethis::use_vignette()
usethis::use_vignette('criteor_test')
usethis::use_vignette('criteor_testt')
devtools::load_all()
roxygen2::roxygenize()
?
/
help(?)
?
/
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(ryandexdirect)
?ryandexdirect
roxygen2::roxygenize()
devtools::load_all()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
readline()
readline("Please")
CriteoR::criteo_advertisers()
CriteoR::criteo_advertisers()
devtools::load_all()
devtools::load_all()
CriteoR::criteo_advertisers()
CriteoR::criteo_advertisers()
exists("criteo_token.RDS")
exists("criteo_token.RDS", where = getwd())
exists("criteo_token.RDS", where = getwd())
file.exists("criteo_token.RDS")
devtools::load_all()
devtools::load_all()
CriteoR::criteo_advertisers()
devtools::load_all()
CriteoR::criteo_advertisers()
CriteoR::criteo_advertisers()
CriteoR::criteo_advertisers()
devtools::load_all()
CriteoR::criteo_advertisers()
CriteoR::criteo_advertisers()
devtools::load_all()
devtools::load_all()
CriteoR::criteo_advertisers()
CriteoR::criteo_advertisers()
devtools::load_all()
CriteoR::criteo_advertisers()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
CriteoR::criteo_advertisers()
CriteoR::criteo_advertisers()
criteo_token <- readRDS("~/Downloads/Work/Personal/Programming/R/Projects/CriteoR/criteo_token.RDS")
crtt <- readRDS("~/Downloads/Work/Personal/Programming/R/Projects/CriteoR/criteo_token.RDS")
criteo_auth()
criteo_auth(client_id = "mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
criteo_auth(client_id = "mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")$token
devtools::load_all()
devtools::load_all()
criteo_auth(client_id = "mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")$token
criteo_auth(client_id = "mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
criteo_auth(client_id = "mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")$token
criteo_auth(client_id = "mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
devtools::load_all()
criteo_auth(client_id = "mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")$token
CriteoR::criteo_advertisers()
criteo_auth(client_id = "mapi-332ed2c2-f461-4a7f-8380-4f5c6a6100dd", "P@s1by_X)DqmJ7!*")
CriteoR::criteo_advertisers()
CriteoR::criteo_advertisers()
devtools::load_all()
CriteoR::criteo_advertisers()
devtools::load_all()
CriteoR::criteo_advertisers()
criteo_budget_info()
criteo_budget_info(columns = "all")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
criteo_campaigns()
devtools::load_all()
criteo_campaigns()
criteo_campaigns(active_campaigns_only = F)
roxygen2::roxygenise()
criteo_stats_report()
Sys.Date() - 1
Sys.Date() - 1
criteo_stats_report()
criteo_stats_report()
devtools::load_all()
criteo_stats_report()
criteo_stats_report(start_date = "2019-05-01")
criteo_stats_report(start_date = "2019-05-01", end_date = "2019-05-01")
criteo_stats_report(start_date = "2019-05-01", end_date = "2019-05-02")
devtools::load_all()
criteo_stats_report()
httr::content(criteo_stats_report(), as = "text", encoding = "UTF-8")
devtools::load_all()
criteo_stats_report()
devtools::load_all()
criteo_stats_report()
criteo_stats_report()
criteo_stats_report()
criteo_stats_report(dimensions = "Year", "Week", "Day")
criteo_stats_report()
criteo_stats_report(dimensions = c("Year", "Week", "Day"))
criteo_stats_report(dimensions = c("Year", "Week", "Day"), prettify = F)
criteo_stats_report(dimensions = c("CampaignID", "Hour"), prettify = T)
criteo_stats_report(dimensions = c("Day", "Hour"), prettify = T)
criteo_stats_report(dimensions = c("Day", "Hour"), prettify = F)
criteo_stats_report()
devtools::load_all()
criteo_stats_report()
tt <- criteo_stats_report()
tt$status_code
criteo_stats_report(dimensions = c("Day", "Hour"))$status_code
criteo_stats_report(dimensions = c("CampaignID", "Hour"))$status_code
criteo_stats_report(dimensions = c("CampaignID", "Hour"))
criteo_stats_report(dimensions = c("CampaignId", "Hour"))
tt <- criteo_stats_report(dimensions = c("CampaignId", "Hour"))
tt$content
httr::content(tt$content, as = "text", encoding = "UTF-8")
httr::content(tt, as = "text", encoding = "UTF-8")
httr::content(tt)
httr::content(tt)$message
cat(httr::content(tt)$message)
cat("Oops, error! Criteo says: \n"httr::content(tt)$message)
cat("Oops, error! Criteo says: \n", httr::content(tt)$message)
cat(" Oops, error! Criteo says: \n", httr::content(tt)$message)
devtools::load_all()
criteo_stats_report()
criteo_stats_report()
devtools::load_all()
criteo_stats_report()
devtools::load_all()
criteo_stats_report()
devtools::load_all()
devtools::load_all()
criteo_stats_report()
devtools::load_all()
criteo_stats_report()
devtools::load_all()
criteo_stats_report()
list("0", 'fa') == list("1", 'fa')
c("1
c("0", 'fa') == c("1", 'fa')
c("0", 'fa') == c("1", 'fa')
unlist(list("0", 'fa'))
devtools::load_all()
criteo_stats_report()
criteo_stats_report(dimensions = c("CampaignId", "Hour"))
devtools::load_all()
criteo_stats_report(dimensions = c("CampaignId", "Hour"))
criteo_stats_report(dimensions = "CampaignId")
criteo_stats_report(dimensions = "Day")
criteo_stats_report(dimensions = "Year")
criteo_stats_report(dimensions = list("CampaignId"))
devtools::load_all()
criteo_stats_report(dimensions = c("CampaignId", "Hour"))
criteo_stats_report(dimensions = "CampaignId")
criteo_stats_report(dimensions = "Year")
unlist("Year")
devtools::load_all()
criteo_stats_report(dimensions = "Year")
criteo_stats_report(dimensions = c("CampaignId", "Day"))
devtools::load_all()
criteo_stats_report(dimensions = c("CampaignId", "Day"))
criteo_stats_report(dimensions = "Year")
criteo_stats_report(dimensions = c("Year"))
criteo_stats_report(dimensions = list("Year"))
class("some")
class(c("Some"))
typeof(list("some"))
typeof("some")
typeof(c("some"))
typeof(c("some", "as"))
devtools::load_all()
criteo_stats_report(dimensions = c("CampaignId", "Day"))
criteo_stats_report(dimensions = c("CampaignId"))
c("CampaignId", "some")
as.list(c("CampaignId", "some"))
devtools::load_all()
criteo_stats_report(dimensions = c("CampaignId", "Day"))
criteo_stats_report(dimensions = "Year")
criteo_stats_report(dimensions = list("Year"))
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
criteo_stats_report(report_type = "TransactionID")
criteo_stats_report(report_type = "TransactionID", prettify = F)
criteo_stats_report(report_type = "FacebookDPA", prettify = F)
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
criteo_stats_report(report_type = "FacebookDPA", prettify = F)
criteo_stats_report(report_type = "FacebookDPA", prettify = F)
todor::todor()
todor::todor()
usethis::use_spell_check()
devtools::check()
criteo_stats_report()
lintr::lint_package()
devtools::use_vignette("criteor_test")
usethis::use_vignette()
usethis::use_vignette("cruteor_test")
devtools::install_github("sergeymong/CriteoR", ref = 'dev')
devtools::install_github("sergeymong/CriteoR")
devtools::install_github("https://github.com/sergeymong/CriteoR/tree/develop")
llibrary(CriteoR)
library(CriteoR)
criteo_advertisers()
remove.packages("CriteoR")
remove.packages(c("CriteoR"))
devtools::uninstall()
devtools::install_github("sergeymong/CriteoR", ref='develop')
devtools::uninstall()
devtools::use_vignette("CriteoR_intro")
usethis::use_vignette("CriteoR_intro")
criteo_stats_report(start_date = "2017-01-01",
end_date = Sys.Date() - 1,
metrics = list("Audience", "Displays", "Clicks",
"ECpc", "ECpm", "AdvertiserCost",
"SalesPc", "RevenueGeneratedPc", "AverageCart"),
prettify = F)
devtools::load_all()
criteo_stats_report(start_date = "2017-01-01",
end_date = Sys.Date() - 1,
metrics = list("Audience", "Displays", "Clicks",
"ECpc", "ECpm", "AdvertiserCost",
"SalesPc", "RevenueGeneratedPc", "AverageCart"),
prettify = F)
criteo_stats_report(start_date = "2017-01-01",
end_date = Sys.Date() - 1,
metrics = list("Audience", "Displays", "Clicks",
"ECpc", "ECpm", "AdvertiserCost",
"SalesPc", "RevenueGeneratedPc", "AverageCart"),
prettify = T)
devtools::load_all()
criteo_stats_report(start_date = "2017-01-01",
end_date = Sys.Date() - 1,
metrics = list("Audience", "Displays", "Clicks",
"ECpc", "ECpm", "AdvertiserCost",
"SalesPc", "RevenueGeneratedPc", "AverageCart"),
prettify = T)
devtools::build_vignettes()
devtools::document()
devtools::use_readme_rmd()
devtools::install_github("sergeymong/CriteoR", ref = 'develop')
